<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Peydon&#39;s blog.</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-15T09:41:31.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Dongpei Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hadoop简介</title>
    <link href="http://yoursite.com/2017/11/14/HD_Introduction/"/>
    <id>http://yoursite.com/2017/11/14/HD_Introduction/</id>
    <published>2017-11-14T06:13:41.000Z</published>
    <updated>2017-11-15T09:41:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章用于记录hadoop的学习心得，主要是理论部分。本专题大部分出自 <em>Hadoop-The Definitive Guide</em> 第四版中的内容，算是对书中知识的总结和凝练。hadoop及相关技术实践部分将会在另外的专题中。<br><a id="more"></a></p><h2 id="初识hadoop"><a href="#初识hadoop" class="headerlink" title="初识hadoop"></a>初识hadoop</h2><blockquote><p>In pioneer days they used oxen for heavy pulling, and when one ox couldn’t budge a log, they didn’t try to grow a larger ox. We shouldn’t be trying for bigger computers, but for more systems of computers.<br>— Grace Hopper</p></blockquote><h3 id="大数据时代"><a href="#大数据时代" class="headerlink" title="大数据时代"></a>大数据时代</h3><p>我们处于大数据的年代下，数据量的庞大已经超乎我们的想象，而且这个数值每年都在疯狂的增长。<br>事实上，我们虽然有了这么多数据，但是我们却想知道的是这些数据对我们的价值是什么。如果说大数据的存在是好消息，那么坏消息就是我们仍然难以很好的存储和分析这些大数据。</p><h3 id="数据存储和分析"><a href="#数据存储和分析" class="headerlink" title="数据存储和分析"></a>数据存储和分析</h3><p>一个很重要的问题是，存储设备的I/O速度已经跟不上数据存储量了，每一次读取全部数据的时间越来越长。这意味着存储量增大可是设备的速度却难以提升。<br>我们可以很容易想到并行的方法：同时对多个硬盘进行读取，这样就可以提供较快的速度来完成相应的分析任务。但这里有两个问题:</p><ul><li>硬件故障<br>机器故障带来的问题是数据的丢失，通常方法是使用备份的方法，系统存储了数据的多个copy，一旦硬件出现故障，仍可以有备份可用，如<a href="https://baike.baidu.com/item/%E7%A3%81%E7%9B%98%E9%98%B5%E5%88%97?fromtitle=%E7%8B%AC%E7%AB%8B%E5%86%97%E4%BD%99%E7%A3%81%E7%9B%98%E9%98%B5%E5%88%97&amp;fromid=6274825" target="_blank" rel="external">RAID</a> ，但在hadoop的HDFS中将会有点不一样，这在接下来会详细解释。</li><li>数据的合并<br>对于数据分析任务来说，往往我们需要统计分析所有存储设备上的某一类型数据。hadoop在该问题上则提供了一种叫做MapReduce的方法，使用一个可编程的方法，来定义一个job任务，核心是把任务转换成键值对的集合。我们也会详细介绍Mapreduce的原理和功能。</li></ul><p>总的来说，hadoop提供了一个可靠的，可伸缩的用于大规模存储和分析的软件框架。他解决数据以怎样的方法存储和以怎样的方法去统计分析数据的问题。</p><h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><p>对于hadoop来说，mapreduce是对数据分析查询的基本方法，有点类似暴力搜索的方法，对整个数据中心的数据进行统计和分析，是一种批处理作业的方法。用户只需要输入job程序，以及定义数据集的位置，mapreduce则通过自身的job调度和批处理的方式完成。几乎每次查询都要对大量的数据进行统计，因而mapreduce适用于offline的方式，对于交互式的即时查询并不是很合适。</p><h4 id="批处理之外"><a href="#批处理之外" class="headerlink" title="批处理之外"></a>批处理之外</h4><p>mapreduce的批处理机制使得他难以应付交互式的分析。但对于hadoop生态圈，HDFS和MapReduce只是其中一部分，正是由于各种各样的需求，Hadoop生态圈才出现了其他的一些项目，例如HBase，正式提供了键值对基于HDFS的存储方式，并且同时提供了用于在线的单独记录的读写和用于离线的批处理操作的读写。</p><p>事实上，真正实现这个功能的是YARN（<em>Yet Another Resource Negotiator</em>）,一个集群的资源管理系统，允许任何分布式程序在hadoop集群上运行。</p><p>经过几年的时间发展，在Hadoop上已经有了很多的数据的处理模式。</p><ul><li>交互式SQL<br>Impala,Hive</li><li>交互式处理<br>Spark(中间结果存在内存里，适用多次迭代数据的处理，如机器学习)</li><li>流处理<br>Storm,Spark Streaming, Samza</li><li>搜索<br>Solr</li></ul><h3 id="和其他系统的对比"><a href="#和其他系统的对比" class="headerlink" title="和其他系统的对比"></a>和其他系统的对比</h3><p>hadoop并非首个分布式的数据存储分析的框架。但因为独特的功能特性使得它与其他的系统有所不同。</p><h4 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h4><p>为什么不能用建立在大量硬盘上的数据库系统来做大规模数据分析？为什么需要hadoop？</p><p>这个问题的答案在于硬盘设备上：硬盘查找数据所需的时间（移动磁盘头）是很难提升的，但是传输速率却可以通过提升硬盘的带宽来实现。</p><p>换句话说，如果一个查询包括大量的寻找数据的时间，那么这个查询效率就会比较低（相比于流数据处理）。对于传统的数据库所采用的B树方法，其效率取决于寻找数据的次数。因此小规模的数据处理可以有效处理，但是对于大规模的数据而言，B树的效率要低于Mapreduce——采用sort/merge的方式重建数据库。</p><p>mapreduce可以看成是传统数据库的扩充，适合对整个数据集的批处理运算。而传统数据库通过对数据集建立索引，可以有效对点查询和更新产生较低的延迟。mapreduce适合一次写入多次读取的数据，而传统数据库适合多次更新的数据集。</p><p>RDBMS vs MapReduce</p><table><thead><tr><th>items</th><th>Traditional RDBMS</th><th>MapReduce</th></tr></thead><tbody><tr><td>数据规模</td><td>GB</td><td>PB</td></tr><tr><td>数据存取</td><td>交互式、批处理</td><td>批处理</td></tr><tr><td>更新</td><td>多次读写</td><td>一次读多次写</td></tr><tr><td>事务特性</td><td>ACID</td><td>None</td></tr><tr><td>结构</td><td>静态模式</td><td>动态模式</td></tr><tr><td>完整性</td><td>高</td><td>低</td></tr><tr><td>数据规模拓展</td><td>非线性的</td><td>线性的</td></tr></tbody></table><h4 id="网格计算"><a href="#网格计算" class="headerlink" title="网格计算"></a>网格计算</h4><p>高性能计算和网格计算也是最近的热门之一。网格计算也是一种处理大规模数据的几种方法，通过将作业分散到各个机器上，然后有一个公共的存储区域组成的共享文件系统。但这种方法的瓶颈在于计算机之间的传输带宽。</p><p>Mapreduce尽量在本地上存储数据，实现数据的快速访问。同时通过显式网络拓扑结构来节省带宽。</p><p>高性能计算使用的编程模型是MPI，虽然能提供很高的控制权，可是是比较底层的一些方法，使用起来需要考虑数据流的先后顺序，以及对任务的划分也不容易分析，而mapreduce提供了较为高级的接口，无需考虑数据流的相互影响。</p><p>不同于高性能计算，MapReduce采用无共享存储的结构，可以自动检测任务过程中失败的子任务，并重新自动执行，而MPI必须显示检查错误和恢复那些子任务。大大提升了编程难度。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本系列文章用于记录hadoop的学习心得，主要是理论部分。本专题大部分出自 &lt;em&gt;Hadoop-The Definitive Guide&lt;/em&gt; 第四版中的内容，算是对书中知识的总结和凝练。hadoop及相关技术实践部分将会在另外的专题中。&lt;br&gt;
    
    </summary>
    
    
      <category term="hadoop学习笔记" scheme="http://yoursite.com/tags/hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>python学习的14张思维导图</title>
    <link href="http://yoursite.com/2017/10/17/python%E5%AD%A6%E4%B9%A0%E7%9A%8414%E5%BC%A0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/10/17/python学习的14张思维导图/</id>
    <published>2017-10-17T13:24:57.000Z</published>
    <updated>2017-10-19T04:06:35.784Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了python学习过程中的一些基础知识和纲要，利用14张思维导图快速建立python的体系，原文见　<a href="https://woaielf.github.io" target="_blank" rel="external">https://woaielf.github.io</a>.<br><a id="more"></a></p><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p><img src="/images/总览.png" alt=""></p><h2 id="14张思维导图"><a href="#14张思维导图" class="headerlink" title="14张思维导图"></a>14张思维导图</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p><img src="/images/基础知识.png" alt=""><br><img src="/images/基础知识2.png" alt=""></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><img src="/images/datatype.png" alt=""></p><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p><img src="/images/序列.png" alt=""></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><img src="/images/字符串.png" alt=""></p><h3 id="列表＆元组"><a href="#列表＆元组" class="headerlink" title="列表＆元组"></a>列表＆元组</h3><p><img src="/images/列表&amp;元组.png" alt=""></p><h3 id="字典＆集合"><a href="#字典＆集合" class="headerlink" title="字典＆集合"></a>字典＆集合</h3><p><img src="/images/字典&amp;集合.png" alt=""></p><h3 id="条件＆循环"><a href="#条件＆循环" class="headerlink" title="条件＆循环"></a>条件＆循环</h3><p><img src="/images/条件&amp;循环.png" alt=""></p><h3 id="文件对象"><a href="#文件对象" class="headerlink" title="文件对象"></a>文件对象</h3><p><img src="/images/文件对象.png" alt=""></p><h3 id="错误＆异常"><a href="#错误＆异常" class="headerlink" title="错误＆异常"></a>错误＆异常</h3><p><img src="/images/错误&amp;异常.png" alt=""></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><img src="/images/函数.png" alt=""></p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p><img src="/images/模块.png" alt=""></p><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><p><img src="/images/面向对象编程.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了python学习过程中的一些基础知识和纲要，利用14张思维导图快速建立python的体系，原文见　&lt;a href=&quot;https://woaielf.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://woaielf.github.io&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>
